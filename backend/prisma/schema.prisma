generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

model User {
  id                  String @id
  email               String @unique
  username            String? @unique
  password            String
  transactionPassword String?
  createdAt           DateTime      @default(now())
  userProfile         UserProfile?  @relation(onDelete: Cascade)
  accounts            BankAccount[] @relation(onDelete: Cascade)
  loans               Loan[]        @relation(onDelete: Cascade)
}

model UserProfile {
  id        String @id @default(uuid())
  userId    String @unique
  firstName String
  lastName  String
  address   String
  phone     String
  image     String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BankAccount {
  id               String        @id @default(uuid())
  accountNumber    String        @unique
  type             AccountEnum   @default(BUSINESS)
  balance          Float         @default(0.0)
  userId           String
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactionsFrom Transaction[] @relation("FromAccount", onDelete: Cascade)
  transactionsTo   Transaction[] @relation("ToAccount", onDelete: Cascade)
  createdAt        DateTime      @default(now())
  loans            Loan[]        @relation("LoanAccount", onDelete: Cascade)
  Card             Card[]        @relation("BankAccount", onDelete: Cascade)
}

model Transaction {
  id            String                @id @default(uuid())
  fromAccountId String
  toAccountId   String
  amount        Float
  timestamp     DateTime              @default(now())
  fromAccount   BankAccount           @relation("FromAccount", fields: [fromAccountId], references: [id], onDelete: Cascade)
  toAccount     BankAccount           @relation("ToAccount", fields: [toAccountId], references: [id], onDelete: Cascade)
  status        TransactionStatusEnum @default(PENDING)
  reference     String?
}

model Loan {
  id           String         @id @default(uuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId    String
  account      BankAccount    @relation("LoanAccount", fields: [accountId], references: [id], onDelete: Cascade)
  amount       Float
  interestRate Float
  termMonths   Int
  startDate    DateTime
  endDate      DateTime
  status       LoanStatusEnum @default(PENDING)
  createdAt    DateTime       @default(now())
}

model Card {
  id            String      @id @default(uuid())
  cardNumber    String      @unique
  cardType      CardEnum
  expiration    DateTime
  cvv           String      @unique
  bankAccountId String
  bankAccount   BankAccount @relation("BankAccount", fields: [bankAccountId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
}

enum AccountEnum {
  SAVINGS
  BUSINESS
}

enum TransactionStatusEnum {
  PENDING
  COMPLETED
  FAILED
}

enum LoanStatusEnum {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  CLOSED
  DEFAULTED
}

enum CardEnum {
  DEBIT
  CREDIT
}
